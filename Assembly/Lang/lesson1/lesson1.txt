####### ASSEMBLY CODE ##########
section .data
	text db "Hello, World",10

section .text
	global _start

_start:
	mov rax, 1
	mov rdi, 1
	mov rsi, text
	mov rdx, 14
	syscall

	mov rax, 60
	mov rdi, 0
	syscall

######## GENERAL OVERVIEW ############


####
First things first, to compile this .asm file we need to:

$ nasm -f elf64 -o hello.o hello.asm

Then:

$ ld hello.o -o hello
#####


'text db "Hello, World", 10'

db => "define byte"s

    It essentially means that we are going to define some RAW BYTES
    of data to insert into our code

    '"Hello, World", 10'
    This is the bytes of data we are defining. Each character in the 
    string is a single byte. The "10" is a newline character, which is often
    denoted as "\n".

    'text'
    This is a name assigned to the address in memory that this data is located
    in. Whenever we use "text" later in the code, when the code is compiled,
    the compiler will determine the actual location in memory of this data and
    replace all future instances of "text" with that memory.
    In this case is a LABELl


REGISTERS:

Registers are a part of the processor that temporarily holds memory.
In the x86_64 architecture, registers hold 64 bits.
This means each register can hold the values:

Unsigned: 0                  - 18446744073709551616
Signed: -9223372036854775808 - 9223372036854775807

registers => 64-bit/32-bit/16-bit/8-bit

Ex of a 64-bit = rax


SYSTEM CALL:

A system call, or syscall, is when a program requests a service from the KERNAL.
System calls will differ by operating system because different operationg systems use
different kernels.
All syscall have an ID associated with them (a number).
Syscalls also take arguments, meaning, a list of inputs.

SYSTEM CALL INPUTS BY REGISTER (TABLE)

___________________________________
 Argument |        Registers      
-----------------------------------
   ID     |          rax          
-----------------------------------
    1     |          rdi          
-----------------------------------
    2     |          rsi          
-----------------------------------
    3     |          rdx          
-----------------------------------
   4      |          r10          
----------------------------------- 
   5      |          r8           
-----------------------------------
   6      |          r9           
-----------------------------------

The ID for the syscall is on the rax register, the first call is in the rdi
and so forth...


#SYS_WRITE (ID=1)

__________________________________________________
  Argument Type             Argument Description
--------------------------------------------------
                     |     0 (Standard Input),
 File Descriptor     |     1 (Standard Output),
                     |     2 (Standard Error)
--------------------------------------------------
     Buffer          | Location of string to write
--------------------------------------------------
      Count          |      Lenght of string     
--------------------------------------------------

So, if we want to write some text on the screen:
 
syscall    -   ID   -        ARG 1       -  ARG 2   - ARG 3
sys_write  -   1    -  #filedescriptor   - $buffer  - #count


In our code, we want to write "Hello, World":

syscall    - rax    -   rdi    -   rsi   - rdx
sys_write  -  1     -    1     -  ADDR   - 14 (number of character + \n)

In the assembly code:

_start:
    mov rax, 1      (id of the syscall)
    mov rdi, 1      (ARG 1)
    mov rsi, text   (ARG 2)
    mov rdx, 14     (ARG 3)
    syscall

The "mov" keyword means we move the data around (data after the comma to the said register).
In the aforementioned case, we are moving INT 1 to RAX REGISTER; INT 1 to RDI REGISTER;
LABEL TEXT to RSI REGISTER; and INT 14 to RDX REGISTER; and then calling sys_write!


#SYS_EXIT (ID = 60)

ARG 1 = 0 (no error)

In the assembly code:

    mov rax, 60     (id of syscall)
    mov rdi, 0      (ARG 1)


SECTIONS:

All x86_64 assembly files have three sections:'.data', '.bss', '.text'.
The DATA SECTION is where all data is defined before compilation;
The BSS SECTION is where data is allocated for future use;
The TEXT SECTION is where the actual code goes.

LABELS:

A "label" is used to label a part of code.
Upon compilation, the compiler will calculate the location in wich the
label will sit in memory.
At any time the name of the label is used afterwards, that name is
replaced by the location in memory by compiler.

The "start label":

    The "_start" label is essential for all programs.
    When your program is compiled and later executed,
    it is executed first at the location of "_start".
    If the linker cannot find "_start", it will throw
    an error.

The "global label":

    The word "global" is used when you want the linker
    to be able to know the address of some label.
    The object file generated will contain a link to every
    label declared "global".
    In this case, we have to declare "_start" as global since
    it is required for the code to be properly linked.


